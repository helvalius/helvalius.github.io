<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hel's Corner]]></title>
  <link href="http://helvalius.github.io/atom.xml" rel="self"/>
  <link href="http://helvalius.github.io/"/>
  <updated>2013-05-20T12:42:49+00:00</updated>
  <id>http://helvalius.github.io/</id>
  <author>
    <name><![CDATA[Helvalius (Jan Nonnen)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use a Closure to capture arguments in Spock]]></title>
    <link href="http://helvalius.github.io/blog/2013/03/26/use-a-closure-to-caputre-arguments-in-spock/"/>
    <updated>2013-03-26T14:07:00+00:00</updated>
    <id>http://helvalius.github.io/blog/2013/03/26/use-a-closure-to-caputre-arguments-in-spock</id>
    <content type="html"><![CDATA[<p>Just today I have added Groovy tests using <a href="http://code.google.com/p/spock/">Spock</a> to my maven/tycho build Eclipse plugin. During test migration from <a href="https://github.com/alexruiz/fest-assert-2.x">FEST-Assertions</a> &amp; <a href="http://code.google.com/p/mockito/">Mockito</a> I wondered how argument interception in Spock works.</p>

<p>The easy functional solution (that I didn&rsquo;t directly found on the web) is simple: <strong>Use a closure!</strong></p>

<p>Lets create a simple Person Java class with a name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">newName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">newName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With a Java Test using Mockito one would use an ArgumentCaptor to verify that the name should be John:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ArgumentCaptor</span> <span class="n">argument</span> <span class="o">=</span> <span class="n">ArgumentCaptor</span><span class="o">.</span><span class="na">forClass</span><span class="o">(</span><span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mock</span><span class="o">).</span><span class="na">doSomething</span><span class="o">(</span><span class="n">argument</span><span class="o">.</span><span class="na">capture</span><span class="o">());</span>
</span><span class='line'><span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;John&quot;</span><span class="o">,</span> <span class="n">argument</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>So one needs three lines of code to match one expected String. Seems to be quite bloated!</p>

<p>In Spock one can use a Closure to do the same test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>   <span class="n">mock</span><span class="o">.</span><span class="na">doSomething</span><span class="o">({</span> <span class="n">it</span><span class="o">.</span><span class="na">name</span><span class="o">==</span><span class="s2">&quot;John&quot;</span><span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to make sure that you really have a Person, you can also use the explicit Closure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>   <span class="n">mock</span><span class="o">.</span><span class="na">doSomething</span><span class="o">({</span> <span class="n">Person</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">.</span><span class="na">name</span><span class="o">==</span><span class="s2">&quot;John&quot;</span><span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Blog]]></title>
    <link href="http://helvalius.github.io/blog/2013/01/02/this-blog/"/>
    <updated>2013-01-02T14:03:00+00:00</updated>
    <id>http://helvalius.github.io/blog/2013/01/02/this-blog</id>
    <content type="html"><![CDATA[<p>The topics of this blog will mainly be based on:</p>

<ul>
<li>My work at the Computer Science at the University of Bonn in the research field of Software Engineering</li>
<li>The monthly Agile Bonn Meetups</li>
<li>Programming</li>
<li>Hobbies: Basketball and Gaming</li>
<li>Other stuff, e.g. my rabbits</li>
</ul>


<p>So have fun!</p>
]]></content>
  </entry>
  
</feed>
