<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hel's Corner]]></title>
  <link href="http://helvalius.github.io/atom.xml" rel="self"/>
  <link href="http://helvalius.github.io/"/>
  <updated>2014-01-06T16:31:05+00:00</updated>
  <id>http://helvalius.github.io/</id>
  <author>
    <name><![CDATA[Helvalius (Jan Nonnen)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BonnAgile 2013 - A Personal Retrospective]]></title>
    <link href="http://helvalius.github.io/blog/2014/01/06/bonnagile-2013-a-personal-retrospective/"/>
    <updated>2014-01-06T15:21:04+00:00</updated>
    <id>http://helvalius.github.io/blog/2014/01/06/bonnagile-2013-a-personal-retrospective</id>
    <content type="html"><![CDATA[<p>(Disclaimer: The following text represents my personal opinion only)</p>

<p>2013 is over and we are approaching the 3-year anniversary with our Bonn Agile meetup in February. A good time to make a retrospective what we did in the last year and maybe think about challenges in the new year.</p>

<!-- more -->


<p>We had the &ldquo;biggest change&rdquo; of the group so far, in March we changed from meeting on the 3rd Monday of each month to the 1st Tuesday. In August we started to create Google+ Events in addition to Xing and discussed about leaving the mailinglist in favor of the Google+ Community.</p>

<p>We started last year with an introduction to Test-Driven-Development with Spock and continued our testing series later with a focus on web-testing with Geb and in October we had in invited talk by Sebastian Golasch to the JavaScript testing framework DalekJS.
Just based on the topics the year was clearly dominated by tooling and testing. On agile processes we had a talk about Kanban and one about testing in agile projects. This corresponds to the fact that we seem have more developers than coaches in the group.</p>

<p>What I personally like are the casual barmeetups as a change of pace to the presentation oriented meetups. They create in my opinion a nice atmosphere where one can really exchange ideas and we can get to know each other. Still, there shouldn&rsquo;t always be a barmeetup and there shouldn&rsquo;t always be a presentation meetup.
Some of the breaks in between or the barmeetups were used to replace meetups when we didn&rsquo;t have a speaker or location. These two things are the biggest challenges also in 2014! A stale group and a stale set of presenters may lead to less participants.
Also the idea of having the meetup at different companies is on the one side a benefit and on the other side a burden. We don&rsquo;t have the fixed location and setup where everyone knows: &ldquo;if I go there on this Tuesday evening there will be a Bonn Agile meetup either with a presentation or casual meetup&rdquo;.</p>

<p>On the other side, it allows companies to represent themselves as well as to have an easy way of providing topics for employees. As the year went on, I had the impression that the number companies willing to host the meetup declined. We also had the same hosts the year before. So maybe we should think about how to find new companies to host our meetups or why we are not appealing for local agile companies in Bonn. How about being more present at FrOsCon as a group?</p>

<p>Currently our Xing group has 204 members, which is an increase of 46 members since February. Yet, one can&rsquo;t really see a statistical increase in the number of attendants per meetup. I would be really interested in getting to know why people join the group, but don&rsquo;t participate in the meetups. Is it the time, the topics, or the locations?</p>

<p>Also, what other platforms would be the place to be as an agile meetup in Germany? We have already a tons of options that one needs to know when posting an event. Is this diversity good or bad? Maybe we could move under the umbrella of the local Softwerkskammer and use their Agora platform for the events and mailinglist? Does it make sense for us to create events only on one platform exclusively? I don&rsquo;t know what my favorite would be as an answer to this question.</p>

<p>Overall, maybe we don&rsquo;t need to change anything or maybe we just need to advertise more in Bonn what we are. I liked the meetups and hope to still have many more Bonn Agile meetups in the future. We have a good group of members organising the meetups and a nice core of people showing up each month. This is something we can build upon and see what the year brings for the group!</p>

<h2>Overview of all Bonn Agile Meetups in 2013</h2>

<p>Here is a table with all topics, locations and number of attendants in 2013.</p>

<table>
<thead>
<tr>
<th></th>
<th> Month </th>
<th> Topic                                             </th>
<th> Presenter                                       </th>
<th> Location         </th>
<th> #Attendants </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Jan   </td>
<td> Modern TDD with Spock                             </td>
<td> Daniel Westheide &amp; Thomas Nicolaisen        </td>
<td> Data in Transit  </td>
<td> 17          </td>
</tr>
<tr>
<td></td>
<td> Feb   </td>
<td> Two-Year Anniversary                              </td>
<td> Barmeetup                                       </td>
<td> Mojito           </td>
<td> 6           </td>
</tr>
<tr>
<td></td>
<td> Mar   </td>
<td> Web-testing with Geb                              </td>
<td> Michael Kutz                                    </td>
<td> Tarent           </td>
<td> 10          </td>
</tr>
<tr>
<td></td>
<td> Apr   </td>
<td> <em>No meetup due to Easter</em>                         </td>
<td>                                                 </td>
<td>                  </td>
<td>            </td>
</tr>
<tr>
<td></td>
<td> May   </td>
<td> Der Mensch in artgerechter Haltung                </td>
<td> Christoph Baudson                               </td>
<td> Doo GmbH         </td>
<td> 20          </td>
</tr>
<tr>
<td></td>
<td> Jun   </td>
<td> Communicating in Distributed Teams                </td>
<td> Barmeetup                                       </td>
<td> Bierhaus Machold </td>
<td> 14          </td>
</tr>
<tr>
<td></td>
<td> Jul   </td>
<td> Dealing with Burnou                               </td>
<td> Barmeetup                                       </td>
<td> Bierhaus Machold </td>
<td> 10          </td>
</tr>
<tr>
<td></td>
<td> Aug   </td>
<td> Sommerfest &amp; From Queuing Theory to Kanban    </td>
<td> Jan Nonnen                                      </td>
<td> Viaboxx GmbH     </td>
<td> 11          </td>
</tr>
<tr>
<td></td>
<td> Sep   </td>
<td> <em>Summerbreak</em>                                     </td>
<td>                                                 </td>
<td>                  </td>
<td>             </td>
</tr>
<tr>
<td></td>
<td> Oct   </td>
<td> Testen und Qualitätssicherung in agilen Projekten </td>
<td> Michael Kutz                                    </td>
<td> Data in Transit  </td>
<td> 15          </td>
</tr>
<tr>
<td></td>
<td> Nov   </td>
<td> DalekJS                                           </td>
<td> Sebastian Golasch                               </td>
<td> Data in Transit  </td>
<td> 15          </td>
</tr>
<tr>
<td></td>
<td> Dec   </td>
<td> DevOps für Entwickler                             </td>
<td> Thomas Nicolaisen (replaced Michael Hüttermann) </td>
<td> Innovationpoint  </td>
<td> 10          </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding Dojo Bonn January 2014]]></title>
    <link href="http://helvalius.github.io/blog/2014/01/04/coding-dojo-bonn-january-2014/"/>
    <updated>2014-01-04T22:24:26+00:00</updated>
    <id>http://helvalius.github.io/blog/2014/01/04/coding-dojo-bonn-january-2014</id>
    <content type="html"><![CDATA[<p>In the first dojo of 2014 on Thursday 16th  we continue working on the Potter Kata.</p>

<p>During the last dojo we had the impression that this kata focusses more on algorithmic design.
Each kata always has a breaking point at which on needs to review and rethink the own solution. The Potter Kata has a tricky breaking point as one thinks more about finding the correct algorithm than the code itself.</p>

<p>A developer should be already aware of clean coding and test-driven development to be really able to do and comprehend each step in my opinion. It is more of an algorithmic puzzle than getting into the flow of coding before working on production code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bonn Coding Dojo July]]></title>
    <link href="http://helvalius.github.io/blog/2013/07/22/bonn-coding-dojo-july/"/>
    <updated>2013-07-22T15:30:00+00:00</updated>
    <id>http://helvalius.github.io/blog/2013/07/22/bonn-coding-dojo-july</id>
    <content type="html"><![CDATA[<h2>What is a Coding Dojo</h2>

<p>A Coding Dojo is a developer meet-up in which they work together in a pre-selected small programming challenge. This is a great way for developers to improve their skills and it&rsquo;s a great activity to encourage learning between developers. Especially in our case, we wanted to have an environment where our students and developers working in companies can learn together and from each other.</p>

<p>During a Code Dojo we work in pairs, using Test-Driven-Development (aka Test-Driven-Design) and adhering to the Clean Code principles in order to solve a problem. These problems are referred to as coding katas as they are meant to be exercised repeatedly and offer learning as well as discussion opportunities. The focus is not on completing the kata in the time available, but rather doing the best that we can, and improving our practice of the above techniques in doing so.</p>

<h2>The Bonn Coding Dojo</h2>

<p>The first Bonn Coding Dojo meeting was on Thursday the 18th. Six people showed up, more than I expected for the first meet-up. The agenda was introduction, selection of a kata to work on and a retrospective at the end. After the introduction we selected the tennis game kata for the coding part.</p>

<h2>What is the Tennis Game Kata</h2>

<p>The tennis kata is  a simplified tennis game adopted from Wii sports. A game consists only of a single set.
&ndash; A player can have points 0 (love), 15 (fifteen), 30 (thirty) or 40 (forty).
&ndash; If a player has 40 points and wins the ball she wins the game.
&ndash; If both have 40 it is a &ldquo;deuce&rdquo;. If the game is in deuce, the player winning the next ball has &ldquo;advantage&rdquo; and a game ball. If the player with advantage wins the ball, she wins the game. If the other player wins they are back at deuce.</p>

<h2>Retrospective</h2>

<p>In the end we had three different approaches with all three pairs using Java as implementation language. In between we swapped pairs twice. One group for example introduced a class to deal with counting the score. Another group translated a counter for representing the tennis points. Overall we had a lot of fun dealing with this kata and all agreed to to the same kata again in the next meeting.</p>

<p>Questions and ideas that came up in the retrospective:
&ndash; What about negative tests and invalid game states?
&ndash; Is the tennis game class doing too much? What about an immutable score object?
&ndash; Are the tennis game rules at a glance readable and recognizable from the source code?</p>

<h2>Personal Feedback for the next meet-up</h2>

<p>This was the first Coding Dojo that I organized, overall I was satisfied with how it worked out, but as always one finds things in which one can improve. I wanted to swap three times, as we had three pairs, but missed taking a look at the time in between. Next time I would like to do the pair sessions with a pomodoro timer, this way all have the same amount of time and a reminder when to switch. Maybe even start at some point to say that we delete all code after a pomodoro so that we could start fresh.</p>

<p>Sometimes I had the impression that we spent too much time on design discussions in a pair when we should have spent the time to implement our ideas in code. The number one rule in a coding dojo: There is only code, and code doesn&rsquo;t exist without tests.</p>

<p>In the future I would like to create and show a basic set of slides in the beginning to remind everyone of the rules and give the meeting a formal frame. I came up with this after taking a look what great working Sleepyfox is doing for the London Coding Dojo. His slides can be seen on speakersdeck: <a href="https://speakerdeck.com/sleepyfox.">https://speakerdeck.com/sleepyfox.</a> This standard fits into the idea behind katas and would give all participants a well-known framework to work in. Furthermore, after looking at the slides from Sleepyfox, I realized that I still need a banner/logo for putting on the slides and the google+ group.</p>

<h2>Bonn Coding Dojo August</h2>

<p>The next Coding Dojo is set for Thursday the 15th August, we will meet again to work on the Tennis Kata in the Römerstrasse 164, A121 at 18:30 till 20:30.  Ideas for a pub  that we can visit after the dojo welcome! :)  Maybe we move to the B-IT building in the Dahlmannstrasse 2  during August/September, as I&rsquo;m working there in a university lab course fulltime during the time period.</p>

<p>All interested students or developers are welcome! I&rsquo;ll post the event in the Coding Dojo Bonn Google+ Community at the beginning of August.</p>

<p>If you can&rsquo;t make it, don&rsquo;t worry. The plan is to organize (based on interest) at least a dojo per month. The monthly meeting will be on the 3rd Thursday each month.</p>

<p><a href="https://plus.google.com/communities/117465553333690535719">Google+ Community</a></p>

<!-- Place this tag where you want the widget to render. -->


<div class="g-community" data-href="https://plus.google.com/communities/117465553333690535719" data-layout="landscape"></div>




<!-- Place this tag after the last widget tag. -->


<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Steam Adds Virtual Trading Cards]]></title>
    <link href="http://helvalius.github.io/blog/2013/05/20/steam-adds-virtual-trading-cards/"/>
    <updated>2013-05-20T13:35:00+00:00</updated>
    <id>http://helvalius.github.io/blog/2013/05/20/steam-adds-virtual-trading-cards</id>
    <content type="html"><![CDATA[<h1>Steam Adds Virtual Trading Cards for Playing</h1>

<p>A few days ago, Valve announced the addition of <a href="http://steamcommunity.com/tradingcards/">Steam Trading Cards</a> for Steam. This adds another layer of game elements to the Steam platform.
For each game there is a specific set of cards. Half of these can be earned randomly while playing (up until now) the participating game. The other half is earned only through trading with other players, either directly or via a market place.
After completing a set of cards, one can craft them into a game badge. These badges can be shown on the Steam profile, but one can also gain random goodies for crafting. These can be coupons and discounts for Steam games or background images for the Steam profil.
Through these badges and rewards, a player can further customize the user profile. This fact is further empowered as one can now gain Steam levels. All badges have a XP value which contributes to the Steam level. Leveling up provides non-tradeable items like profile showcases, additional friend slots, etc.</p>

<p>Taking a look at it from the perspective of <strong>gamification</strong>, this idea and extension of the existing achievement system in Steam is reasonable. Lets look at the
<a href="https://en.wikipedia.org/wiki/Bartle_Test">Bartle character types</a>: Achievers, Explorers, Socializers and Killers.</p>

<p>Valve extended the initial achievement system with the trading cards to incorporate more player styles. The new system requires players to socialize, as they need to trade cards with others to complete their card set. Explorers can play to find rare cards or probably discover hidden badges.
Killers can control the market of the trading cards and can strive on competing for specific cards. Achievers have new card sets and a leveling progressing system that should keep them occupied.</p>

<p>Overall these features bind customers even stronger to the Steam plattform as one collects trading cards and needs to spend playing time to gain some of them. I think this step is reasonable and an interesting approach from Valve to further strengthen the Steam platform.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use a Closure to capture arguments in Spock]]></title>
    <link href="http://helvalius.github.io/blog/2013/03/26/use-a-closure-to-caputre-arguments-in-spock/"/>
    <updated>2013-03-26T14:07:00+00:00</updated>
    <id>http://helvalius.github.io/blog/2013/03/26/use-a-closure-to-caputre-arguments-in-spock</id>
    <content type="html"><![CDATA[<p>Just today I have added Groovy tests using <a href="http://code.google.com/p/spock/">Spock</a> to my maven/tycho build Eclipse plugin. During test migration from <a href="https://github.com/alexruiz/fest-assert-2.x">FEST-Assertions</a> &amp; <a href="http://code.google.com/p/mockito/">Mockito</a> I wondered how argument interception in Spock works.</p>

<p>The easy functional solution (that I didn&rsquo;t directly found on the web) is simple: <strong>Use a closure!</strong></p>

<p>Lets create a simple Person Java class with a name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">newName</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">name</span> <span class="o">=</span> <span class="n">newName</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With a Java Test using Mockito one would use an ArgumentCaptor to verify that the name should be John:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ArgumentCaptor</span> <span class="n">argument</span> <span class="o">=</span> <span class="n">ArgumentCaptor</span><span class="o">.</span><span class="na">forClass</span><span class="o">(</span><span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">verify</span><span class="o">(</span><span class="n">mock</span><span class="o">).</span><span class="na">doSomething</span><span class="o">(</span><span class="n">argument</span><span class="o">.</span><span class="na">capture</span><span class="o">());</span>
</span><span class='line'><span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;John&quot;</span><span class="o">,</span> <span class="n">argument</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>So one needs three lines of code to match one expected String. Seems to be quite bloated!</p>

<p>In Spock one can use a Closure to do the same test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>   <span class="n">mock</span><span class="o">.</span><span class="na">doSomething</span><span class="o">({</span> <span class="n">it</span><span class="o">.</span><span class="na">name</span><span class="o">==</span><span class="s2">&quot;John&quot;</span><span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to make sure that you really have a Person, you can also use the explicit Closure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'>   <span class="n">mock</span><span class="o">.</span><span class="na">doSomething</span><span class="o">({</span> <span class="n">Person</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">.</span><span class="na">name</span><span class="o">==</span><span class="s2">&quot;John&quot;</span><span class="o">})</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Blog]]></title>
    <link href="http://helvalius.github.io/blog/2013/01/02/this-blog/"/>
    <updated>2013-01-02T14:03:00+00:00</updated>
    <id>http://helvalius.github.io/blog/2013/01/02/this-blog</id>
    <content type="html"><![CDATA[<p>The topics of this blog will mainly be based on:</p>

<ul>
<li>My work at the Computer Science at the University of Bonn in the research field of Software Engineering</li>
<li>The monthly Agile Bonn Meetups</li>
<li>Programming</li>
<li>Hobbies: Basketball and Gaming</li>
<li>Other stuff, e.g. my rabbits</li>
</ul>


<p>So have fun!</p>
]]></content>
  </entry>
  
</feed>
